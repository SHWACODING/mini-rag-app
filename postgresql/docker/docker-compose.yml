services:
    # FastAPI Application
    fastapi:
        build:
            context: ..
            dockerfile: docker/minirag/Dockerfile
        container_name: fastapi
        ports:
            - "8000:8000"
        volumes:
            - fastapi_data:/app/assets
        depends_on:
            pgvector:
                condition: service_healthy
        env_file:
            - ./env/.env.app
        networks:
            - backend
        restart: always

    # NGINX Reverse Proxy
    nginx:
        image: nginx:stable-alpine3.20-perl
        container_name: nginx
        ports:
            - "80:80"
        volumes:
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - fastapi
        networks:
            - backend
        restart: always


    # PostgreSQL Database (pgvector)
    pgvector:
        image: pgvector/pgvector:0.8.0-pg17
        container_name: pgvector
        ports:
            - "5433:5432"
        volumes:
            - pgvector:/var/lib/postgresql/data
        env_file:
            - ./env/.env.postgres
        networks:
            - backend
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
            start_period: 10s

    # Qdrant (Vector Database)
    qdrant:
        image: qdrant/qdrant:v1.13.6
        container_name: qdrant
        ports:
            - "6333:6333"
            - "6334:6334"
        volumes:
            - qdrant_data:/qdrant/storage
        networks:
            - backend
        restart: always

    # Prometheus for Monitoring
    prometheus:
        image: prom/prometheus:v3.3.0
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - prometheus_data:/prometheus
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
            - backend
        restart: always
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'

    # Grafana Dashboard for Visualization
    grafana:
        image: grafana/grafana:11.6.0-ubuntu
        container_name: grafana
        ports:
            - "3000:3000"
        volumes:
            - grafana_data:/var/lib/grafana
        env_file:
            - ./env/.env.grafana
        depends_on:
            - prometheus
        networks:
            - backend
        restart: always

    # Node Exporter for System Metrics
    node-exporter:
        image: prom/node-exporter:v1.9.1
        container_name: node-exporter
        ports:
            - "9100:9100"
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        networks:
            - backend
        restart: always

    # PostgreSQL Exporter for Postgres Metrics
    postgres-exporter:
        image: prometheuscommunity/postgres-exporter:v0.17.1
        container_name: postgres-exporter
        ports:
            - "9187:9187"
        env_file:
            - ./env/.env.postgres-exporter
        depends_on:
            - pgvector
        networks:
            - backend
        restart: always
    
    # RabbitMQ (Message Broker)
    rabbitmq: 
        image: rabbitmq:4.1.2-management-alpine
        container_name: rabbitmq
        ports:
            - "5672:5672"    # AMQP Port
            - "15672:15672"  # Management UI Port
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
            - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
        env_file:
            - ./env/.env.rabbitmq
        networks:
            - backend
        restart: always
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "ping"]
            timeout: 10s
            retries: 5
    
    # Redis (Results Backend & Cache)
    redis:
        image: redis:8.0.3-alpine
        container_name: redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        env_file:
            - ./env/.env.redis
        networks:
            - backend
        restart: always
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            timeout: 10s
            retries: 5
        # Enable Redis persistence and password
        command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-minirag_redis_2222}"]

networks:
    backend:
        driver: bridge

volumes:
    fastapi_data:
    pgvector:
    qdrant_data:
    prometheus_data:
    grafana_data:
    rabbitmq_data:
    redis_data:
